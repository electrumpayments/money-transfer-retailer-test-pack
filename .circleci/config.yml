version: 2
jobs:
  build-and-release:
    docker:
      - image: 813968012009.dkr.ecr.us-east-1.amazonaws.com/circleci-openjdk8-8u162
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          # if you ever need to invalidate the cache, simply bump the version number
          keys:
            - v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
            - v1-maven-{{ .Branch }}
      - run:
          name: Download dependencies
          command: mvn dependency:resolve-plugins dependency:go-offline -B -Dstyle.color=always
      - save_cache:
          paths:
            - ~/.m2/repository
          key: v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
      - run:
          name: Validate release type
          command: /electrum/bin/validateReleaseType.sh
      - run:
          name: Compile, Test, and Release
          command: /electrum/bin/simpleTestAndReleaseJava.sh
      - run:
          name: Release failed! Revert any release steps that might have been taken
          command: /electrum/bin/revertReleaseJava.sh
          when: on_fail
      - run:
          name: Save test results
          command: |
            mkdir -p ~/tests/
            if [ -d target/surefire-reports ]; then mkdir -p ~/tests/surefire/; cp target/surefire-reports/*.xml ~/tests/surefire/; fi
            if [ -d target/failsafe-reports ]; then mkdir -p ~/tests/failsafe/; cp target/failsafe-reports/*.xml ~/tests/failsafe/; fi
          when: always
      - store_test_results:
          path: ~/tests
      - store_artifacts:
          path: ~/tests
          destination: tests
      - store_artifacts:
          path: log
          destination: log
      - store_artifacts:
          path: logs
          destination: logs
      - store_artifacts:
          path: release
          destination: release
  code-coverage-report:
    docker:
      - image: 813968012009.dkr.ecr.us-east-1.amazonaws.com/circleci-openjdk8-8u162
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          # if you ever need to invalidate the cache, simply bump the version number
          keys:
            - v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
            - v1-maven-{{ .Branch }}
      - run:
          name: Generate code coverage report
          command: mvn cobertura:cobertura -B -Dstyle.color=always
      - store_artifacts:
          path: target/site/cobertura
          destination: coverage
  build-with-latest-deps:
    docker:
      - image: 813968012009.dkr.ecr.us-east-1.amazonaws.com/circleci-openjdk8-8u162
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          # if you ever need to invalidate the cache, simply bump the version number
          keys:
            - v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
            - v1-maven-{{ .Branch }}
      - run:
          name: Update pom with latest Electrum deps
          command: /electrum/bin/updatePomWithLatestDeps.sh
      - run:
          name: Test, but only if any Electrum dependencies changed
          command: /electrum/bin/testWithUpdatedDepsJava.sh
      - run:
          name: Notify success to slack
          command: /electrum/bin/notifySlackDepBuildSucceeded.sh
          when: on_success
      - run:
          name: Notify failure to slack
          command: /electrum/bin/notifySlackDepBuildFailed.sh
          when: on_fail
      - run:
          name: Save test results
          command: |
            mkdir -p ~/tests/
            if [ -d target/surefire-reports ]; then mkdir -p ~/tests/surefire/; cp target/surefire-reports/*.xml ~/tests/surefire/; fi
            if [ -d target/failsafe-reports ]; then mkdir -p ~/tests/failsafe/; cp target/failsafe-reports/*.xml ~/tests/failsafe/; fi
          when: always
      - store_test_results:
          path: ~/tests
      - store_artifacts:
          path: ~/tests
          destination: tests
      - store_artifacts:
          path: log
          destination: log
      - store_artifacts:
          path: logs
          destination: logs
  tests-for-test-server:
    docker:
      - image: 813968012009.dkr.ecr.us-east-1.amazonaws.com/circleci-openjdk8-8u162
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          # if you ever need to invalidate the cache, simply bump the version number
          keys:
            - v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
            - v1-maven-{{ .Branch }}
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)
      - run:
          name: Compile service for the Test server Docker container
          command: mvn clean install -B -Dstyle.color=always
      - run:
          name: Build the Test Server Docker container
          command: docker build -t=$CIRCLE_PROJECT_REPONAME ./target
      - run:
          name: Run the Test Server Service in the Docker Container
          command: docker run -d -p 8080:8080 --name test-server-container $CIRCLE_PROJECT_REPONAME
      - run:
          name: Run postman tests from the collection against the docker test server service
          command: docker exec test-server-container newman run test/MoneyTransferRetailerInterface.postman_collection.json -e test/localhost.postman_environment.json
  deploy-to-heroku:
    machine:
        enabled: true
    environment:
      HEROKU_APP: money-transfer-test-pack
    steps:
      - checkout
      - restore_cache:
          # if you ever need to invalidate the cache, simply bump the version number
          keys:
            - v1-maven-{{ .Branch }}-{{ checksum "pom.xml" }}
            - v1-maven-{{ .Branch }}
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP.git master

workflows:
  version: 2
  commit:
    jobs:
      - build-and-release:
          context: java
      - tests-for-test-server:
          context: java
      - code-coverage-report:
          context: java
          requires:
            - build-and-release
      - deploy-to-heroku:
          context: java
          requires:
            - tests-for-test-server
  nightly:
    jobs:
      - build-with-latest-deps:
          context: java
    triggers:
      - schedule:
          # every night at 00:00 SAST (22:00 UTC)
          cron: "00 22 * * *"
          filters:
            branches:
              only:
                - master